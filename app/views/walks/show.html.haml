- content_for :head do
  %script{:type => "text/javascript", :src => "//maps.googleapis.com/maps/api/js?sensor=false"}
  :javascript
    var poly;
    var map;
    var locations = new Array();

    function initialize() {
      var center_point = new google.maps.LatLng("#{@walk.center_coordinates[:latitude]}", "#{@walk.center_coordinates[:longitude]}");
      var myOptions = {
        zoom: 17,
        center: center_point,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };

      map = new google.maps.Map(document.getElementById('map_canvas'), myOptions);
      var polyOptions = {
        strokeColor: '#000000',
        strokeOpacity: 1.0,
        strokeWeight: 3
      }
      poly = new google.maps.Polyline(polyOptions);
      poly.setMap(map);

      for (var i = 0; i < locations.length; i++) {
        addLatLng(new google.maps.LatLng(locations[i].lat, locations[i].long));
      }
      // Add a listener for the click event
      // google.maps.event.addListener(map, 'click', addLatLng);
    }

    /**
    * Handles click events on a map, and adds a new point to the Polyline.
    * @param {MouseEvent} mouseEvent
    */
    function addLatLng(latLng) {
      var path = poly.getPath();

      // Because path is an MVCArray, we can simply append a new coordinate
      // and it will automatically appear
      path.push(latLng);

      // Add a new marker at the new plotted point on the polyline.
      // var marker = new google.maps.Marker({
      //  position: event.latLng,
      //  title: '#' + path.getLength(),
      //  map: map
      // });
    }
  :erb
    <script>
      $(function(){
        <% @walk.locations.each do |location| %>
        locations.push({lat: '<%= location.latitude %>', long: '<%= location.longitude %>'});
        <% end %>
        initialize();
      });
    </script>
.page-header
  %h1= @walk.title
#map_canvas
%h2= t("walks.show.description")
%p= @walk.description
%h2= t("walks.show.notes")
%p= @walk.notes
%h2
  Photos
  - if current_user and current_user == @walk.user
    %small= link_to t("photos.new.upload_new_photo"), new_walk_photo_path(@walk), :class => "btn small"
- if @walk.photos
  - @walk.photos.each do |photo|
    = render :partial => "photos/photo", :locals => {:photo => photo}
%h2= t("walks.show.link")
- if @walk.link
  %p= link_to(t("walks.show.link_label"), @walk.link)
- else
  %p= t("walks.show.no_link")
